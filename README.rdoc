


# ReadTheLeaves


[ReadTheLeaves](https://readtheleaves.herokuapp.com/)


ReadTheLeaves is a casual meetup app based on TeaWithStrangers, created by Ankit Shah. It's backend was built using Ruby on Rails with a PostgreSQL database. IT uses React.js with a Redux architectural framework to create the frontend. Users (strangers) may create accounts to join tea times which are hosted by one user that isn't a stranger, and has their own profile and bio. A dashboard keeps track of the users previous attendances and events.

## Features and implementation

### Attend Tea Times

The core feature of this application is anonymously joining tea time events, in a given city, that list a time and place.

![City Event List](app/assets/images/)

---



---
```javascript

// city detail events join logic //

```
---
Once they join, a user may leave the event at any time for any or no reason. If the event is currently full the user will be added to a waitlist and will be added to the event if another user should leave.

![Host Event](app/assets/images/)

User that become hosts are no longer strangers and can create their own profile with an avatar image and personal bio. They can host (create) events and cancel them for any reason. In addition to a time, date, and place, an event can also have a description which provides a theme for the tea time or to serve as a general icebreaker.

---
```javascript



```

---
This created a much smoother experience for the user to create their route.


---
### Friending

![Friends Page](app/assets/images/friends_page.png)

Users have the abilities search and become friends with others upon acceptance. There is a relationships table that takes care of friend requests and the actual friendships. It holds two user IDs, the status of the relationships and the initiator of the relationship.

---
```ruby
def friends
  relationship_where_status(1)
end

def pending_friends
  relationship_where_status(0).where('relationships.action_user_id != :id', id: self.id)
end

private

def relationship_where_status(status)
  User
    .joins('JOIN relationships ON relationships.user_one_id = users.id OR relationships.user_two_id = users.id')
    .where("relationships.status = :status", status: status)
    .where('relationships.user_one_id = :id OR relationships.user_two_id = :id', id: self.id)
    .where('users.id != :id', id: self.id)
end
```

![Friends Search](app/assets/images/friends_search.png)

To search for friends, we look for non-viable candidates, that are users that you already have a relationship with, whether pending a relationship status or already friends. We remove that group from the remaining user base.

```ruby



```
---

### Path page
![Path Page](app/assets/images/path_show_page.png)

---
Each path has their own details page along with a comment section. The owner of the path has the ability to set the completion of the path, delete the path and the ability to delete comments off the path page. A visit to a friend's page will only allow the ability to comment and the deletion of your own comment.

---

## Features for implementation

Currently, still under development, future builds will include:

#### Event confirmation

User tea time attendance and absence confirmation.

#### Host profile and dashboard

Ability for users to become hosts, and for hosts to have the ability to host events.


#### Google Map API implementation

The ability for strangers to find events in their current city based on map location vs. individual city details.
